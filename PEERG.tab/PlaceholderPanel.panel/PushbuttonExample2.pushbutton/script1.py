# -*- coding: utf-8 -*-
from pyrevit import revit, DB, forms, script
from Autodesk.Revit.DB import *

doc = revit.doc
uidoc = revit.uidoc

# 1Ô∏è‚É£ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä –∞—Ä–º–∞—Ç—É—Ä—ã
rebar_number_input = forms.ask_for_string(
    default='',
    prompt='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞—Ä–º–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:',
    title='–ü–æ–∏—Å–∫ –∞—Ä–º–∞—Ç—É—Ä—ã'
)

if not rebar_number_input:
    forms.alert("–ù–æ–º–µ—Ä –∞—Ä–º–∞—Ç—É—Ä—ã –Ω–µ –≤–≤–µ–¥–µ–Ω. –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    script.exit()

try:
    user_input_number = int(rebar_number_input.strip())
except:
    forms.alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∞—Ä–º–∞—Ç—É—Ä—ã.")
    script.exit()

# 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥
active_view = revit.active_view

# 3Ô∏è‚É£ –ò—â–µ–º –ª–∏—Å—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–º–µ—â—ë–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥
viewport_collector = FilteredElementCollector(doc).OfClass(Viewport)
sheet_id = None

for vp in viewport_collector:
    if vp.ViewId == active_view.Id:
        sheet_id = vp.SheetId
        break

if not sheet_id:
    forms.alert("–ê–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥ –Ω–µ —Ä–∞–∑–º–µ—â—ë–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ.")
    script.exit()

# 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º —Å–∞–º –ª–∏—Å—Ç
sheet = doc.GetElement(sheet_id)

# 5Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥—ã –Ω–∞ —ç—Ç–æ–º –ª–∏—Å—Ç–µ
placed_views = []
viewport_ids = sheet.GetAllViewports()

for vp_id in viewport_ids:
    vp = doc.GetElement(vp_id)
    if hasattr(vp, 'ViewId'):
        view = doc.GetElement(vp.ViewId)
        placed_views.append(view)

# 6Ô∏è‚É£ –ò—â–µ–º Detail Items —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º
detail_items = []

for view in placed_views:
    collector = FilteredElementCollector(doc, view.Id)\
        .OfCategory(BuiltInCategory.OST_DetailComponents)\
        .WhereElementIsNotElementType()

    for item in collector:
        if isinstance(item, FamilyInstance):
            param = item.LookupParameter('Rebar_Number')
            if param:
                if param.StorageType == StorageType.Integer:
                    param_value = param.AsInteger()
                    if param_value == user_input_number:
                        detail_items.append(item)
                elif param.StorageType == StorageType.Double:
                    param_value = param.AsDouble()
                    if int(param_value) == user_input_number:
                        detail_items.append(item)
                else:
                    param_value = param.AsString()
                    if param_value and param_value.strip() == rebar_number_input.strip():
                        detail_items.append(item)

if not detail_items:
    forms.alert("–ù–∞ –ª–∏—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω Detail Item —Å –Ω–æ–º–µ—Ä–æ–º: {}".format(user_input_number))
    script.exit()

# 7Ô∏è‚É£ –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π Detail Item
first_item = detail_items[0]
element_id = str(first_item.Id.IntegerValue)

# 8Ô∏è‚É£ –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
def get_param_as_string(elem, param_name):
    param = elem.LookupParameter(param_name)
    if param:
        if param.StorageType == StorageType.Integer:
            return str(param.AsInteger())
        elif param.StorageType == StorageType.Double:
            return param.AsValueString()
        else:
            return param.AsString() or "(–ø—É—Å—Ç–æ)"
    else:
        return "(–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)"

rebar_number = get_param_as_string(first_item, 'Rebar_Number')
rebar_diameter = get_param_as_string(first_item, 'Rebar_Diameter')
rebar_spacing = get_param_as_string(first_item, 'Rebar_Spacing')

result = (
    "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–≤–æ–≥–æ Detail Item —Å –Ω–æ–º–µ—Ä–æ–º '{}':\n".format(user_input_number) +
    "Element ID: {}\n".format(element_id) +
    "Rebar_Number: {}\n".format(rebar_number) +
    "Rebar_Diameter: {}\n".format(rebar_diameter) +
    "Rebar_Spacing: {}".format(rebar_spacing)
)

forms.alert(result)

# üîü –ò—â–µ–º —Å–µ–º–µ–π—Å—Ç–≤–æ PEER_Rebar TAG
annotation_family_name = 'PEER_Rebar TAG'
annotation_symbol = None

for fs in FilteredElementCollector(doc).OfClass(FamilySymbol)\
        .OfCategory(BuiltInCategory.OST_DetailComponents):
    if fs.Family.Name == annotation_family_name:
        annotation_symbol = fs
        break

if not annotation_symbol:
    forms.alert("–°–µ–º–µ–π—Å—Ç–≤–æ-–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–æ–µ–∫—Ç–µ.".format(annotation_family_name))
    script.exit()

# üîü.1 –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º —Å–µ–º–µ–π—Å—Ç–≤–æ
if not annotation_symbol.IsActive:
    with revit.Transaction("Activate Family Symbol"):
        annotation_symbol.Activate()

try:
    picked_point = uidoc.Selection.PickPoint("–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–∫—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è")
except Exception as e:
    if "aborted the pick operation" in str(e).lower():
        forms.alert("–û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        script.exit()
    else:
        raise

with revit.Transaction("–†–∞–∑–º–µ—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"):
    annotation_instance = doc.Create.NewFamilyInstance(picked_point, annotation_symbol, active_view)

    def set_param(elem, param_name, value):
        param = elem.LookupParameter(param_name)
        if param and not param.IsReadOnly:
            param.Set(value)

    set_param(annotation_instance, 'Rebar_Number', rebar_number)
    set_param(annotation_instance, 'Rebar_Diameter', rebar_diameter)
    set_param(annotation_instance, 'Rebar_Spacing', rebar_spacing)
    set_param(annotation_instance, 'PR_Rebar_ID', element_id)

forms.alert("–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–º–∞—Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
